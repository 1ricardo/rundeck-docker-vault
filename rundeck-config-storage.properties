{% set providerBase = "/rundeck/storage/provider" %}
{% set converterBase = "/rundeck/storage/converter" %}
{% set configConverterBase = "/rundeck/config/storage/converter" %}


{%- macro storage_provider(provider) %}
    {%- set index = provider | base %}
    {%- set type = getv(printf("%s/type", provider), "db") %}
{% if type == 'db' || type == 'file' %}
rundeck.storage.provider.{{index}}.type={% set type = printf("%s/type", provider) %}{{ getv(type, "db")}}
rundeck.storage.provider.{{index}}.path={% set path = printf("%s/path", provider) %}{{ getv(path, "keys")}}
{%- elif type == 'vault-storage' %}
rundeck.storage.provider.{{index}}.type={% set type = printf("%s/type", provider) %}{{ getv(type, "db")}}
rundeck.storage.provider.{{index}}.path={% set path = printf("%s/path", provider) %}{{ getv(path, "keys")}}
rundeck.storage.provider.{{index}}.config.prefix={% set prefix = printf("%s/config/prefix", provider) %}{{ getv(prefix, "prefix")}}
rundeck.storage.provider.{{index}}.config.secretBackend={% set secretbackend = printf("%s/config/secretbackend", provider) %}{{ getv(secretbackend, "secretBackend")}}
rundeck.storage.provider.{{index}}.config.address={% set address = printf("%s/config/address", provider) %}{{ getv(address, "http://localhost:8200")}}
rundeck.storage.provider.{{index}}.config.authBackend={% set authbackend = printf("%s/config/authbackend", provider) %}{{ getv(authbackend, "token")}}
rundeck.storage.provider.{{index}}.config.token={% set token = printf("%s/config/token", provider) %}{{ getv(token, "token")}}
rundeck.storage.provider.{{index}}.config.engineVersion={% set engineversion = printf("%s/config/engineversion", provider) %}{{ getv(engineversion, "1")}}
rundeck.storage.provider.{{index}}.config.storageBehaviour={% set storagebehaviour = printf("%s/config/storagebehaviour", provider) %}{{ getv(storagebehaviour, "vault")}}
rundeck.storage.provider.{{index}}.config.validateSsl={% set validatessl = printf("%s/config/validatessl", provider) %}{{ getv(validatessl, "false")}}
rundeck.storage.provider.{{index}}.config.maxRetries={% set maxretries = printf("%s/config/maxretries", provider) %}{{ getv(maxretries, "3")}}
rundeck.storage.provider.{{index}}.config.retryIntervalMilliseconds={% set retryintervalmilliseconds = printf("%s/config/retryintervalmilliseconds", provider) %}{{ getv(retryintervalmilliseconds, "100")}}
rundeck.storage.provider.{{index}}.config.openTimeout={% set opentimeout = printf("%s/config/opentimeout", provider) %}{{ getv(opentimeout, "3")}}
rundeck.storage.provider.{{index}}.config.readTimeout={% set readtimeout = printf("%s/config/readtimeout", provider) %}{{ getv(readtimeout, "5")}}
rundeck.storage.provider.{{index}}.removePathPrefix={% set removepathprefix = printf("%s/config/removepathprefix", provider) %}{{ getv(removepathprefix, "false")}}
{% endif %}
{% endmacro %}

{%- macro storage_converter(converter) %}
    {%- set index = converter | base %}
rundeck.storage.converter.{{index}}.type={% set type = printf("%s/type", converter) %}{{ getv(type, "jasypt-encryption") }}
rundeck.storage.converter.{{index}}.path={% set path = printf("%s/path", converter) %}{{ getv(path, "keys") }}
rundeck.storage.converter.{{index}}.config.encryptorType={% set encryptortype = printf("%s/config/encryptortype", converter) %}{{ getv(encryptortype, "custom") }}
rundeck.storage.converter.{{index}}.config.password={% set password = printf("%s/config/password", converter) %}{{ getv(password) }}
rundeck.storage.converter.{{index}}.config.algorithm={% set algorithm = printf("%s/config/algorithm", converter) %}{{ getv(algorithm, "PBEWITHSHA256AND128BITAES-CBC-BC") }}
rundeck.storage.converter.{{index}}.config.provider={% set provider = printf("%s/config/provider", converter) %}{{ getv(provider, "BC") }}
{% endmacro %}

{%- macro config_storage_converter(converter) %}
    {%- set index = converter | base %}
rundeck.config.storage.converter.{{index}}.type={% set type = printf("%s/type", converter) %}{{ getv(type, "jasypt-encryption") }}
rundeck.config.storage.converter.{{index}}.path={% set path = printf("%s/path", converter) %}{{ getv(path, "projects") }}
rundeck.config.storage.converter.{{index}}.config.encryptorType={% set encryptortype = printf("%s/config/encryptortype", converter) %}{{ getv(encryptortype, "custom") }}
rundeck.config.storage.converter.{{index}}.config.password={% set password = printf("%s/config/password", converter) %}{{ getv(password) }}
rundeck.config.storage.converter.{{index}}.config.algorithm={% set algorithm = printf("%s/config/algorithm", converter) %}{{ getv(algorithm, "PBEWITHSHA256AND128BITAES-CBC-BC") }}
rundeck.config.storage.converter.{{index}}.config.provider={% set provider = printf("%s/config/provider", converter) %}{{ getv(provider, "BC") }}
{% endmacro %}

{%- if ls(printf("%s/1", providerBase)) | length == 0 %}
rundeck.storage.provider.1.type=db
rundeck.storage.provider.1.path=keys
{% endif %}


{%- for p in lsdir(providerBase) -%}
    {% set provider = printf("%s/%s", providerBase, p) -%}
    {{ storage_provider(provider) }}
{%- endfor %}

{%- for c in lsdir(converterBase) %}
    {% set converter = printf("%s/%s", converterBase, c) -%}
    {{ storage_converter(converter) }}
{%- endfor %}

rundeck.projectsStorageType={{ getv("/rundeck/projectsstoragetype", "db") }}

{% for c in lsdir(configConverterBase) %}
    {% set converter = printf("%s/%s", configConverterBase, c) -%}
    {{ config_storage_converter(converter) }}
{%- endfor %}

